{"version":3,"file":"chunks/37930.a75df1cbee184e98a3fe.min.js","mappings":"8XAGqBA,EAAAA,WACjB,WAAYC,I,4FAAI,SACZC,KAAKD,GAAKA,E,qDAOd,SAAgBE,GACZ,IAAIC,EAAaD,EAAYE,KAAK,MAE9BC,EAAeH,EAAYI,KAAK,4BAKhCC,EAAYC,GAAAA,CAAE,eAAeC,OAAM,GAKvCF,EAAUD,KAAK,mCAAmCA,KAAK,UAAUI,SAKjEH,EAAUI,SAAST,GAAaU,IAAI,UAAW,QAK/CL,EAAUM,WAAW,MAKrBL,GAAAA,CAAEH,GAAcO,IAAI,UAAW,QAG/B,IAAIE,EAAaP,EAAUD,KAAK,QAKhCQ,EACKR,KAAK,wCACLF,KAAK,KAAM,sCAAwCD,GACxDW,EACKR,KAAK,8BACLF,KAAK,KAAM,4BAA8BD,GAI9CW,EAAWR,KAAK,0CAA0CS,IAAIZ,GAI9D,IAAIa,EAAsBT,EAAUD,KAAK,yBACzCU,EAAoBZ,KAAK,KAAMD,GAG/BW,EAAWR,KAAK,qCAAqCM,IAAI,UAAW,UAGpEL,EAAUU,UAAU,QAGpBD,EAAoBJ,IAAI,UAAW,Y,uBAOvC,SAAUM,GACNA,EAASZ,KAAK,UAAUa,YAAY,SACpCD,EAASZ,KAAK,kBAAkBI,SAChCQ,EAASZ,KAAK,sBAAsBF,KAAK,QAAS,IAClDc,EAASZ,KAAK,YAAYF,KAAK,QAAS,M,qJAI5C,WAIII,GAAAA,CAAE,6CAA6CY,GAAG,SAAS,SAAUC,GACjEA,EAAEC,iBACF,IACIC,EAAOf,GAAAA,CAAEP,MAAMuB,QAAQ,QACvBC,EAAOjB,GAAAA,CAAEe,GAAMG,YACfC,EAAWnB,GAAAA,CAAEe,GAAMnB,KAAK,UACxBD,EAAaK,GAAAA,CAAEP,MAAMuB,QAAQ,YAAYpB,KAAK,MAyBlD,OAxBAI,IAAAA,KAAO,CACHoB,KAAM,MACNC,IAAKF,EACLF,KAAMA,EACNK,QATU7B,KAUV8B,QAAS,SAAUC,GACf,IAAIH,EAAMI,SAASC,KACnB1B,GAAAA,CAAEP,MACGuB,QAAQ,YACRW,KAGGN,EAAM,KAAO1B,EAAa,YAC1B,WACIK,GAAAA,CAAEP,MAAMK,KAAK,YAAY8B,SACzBC,4BACA7B,GAAAA,CAAE,oBAAoB8B,oBAItCC,MAAO,SAAUP,GACb,OAAO,MAGR,KAMPxB,IAAAA,GAAAA,aACAA,GAAAA,CAAE,qBAAqBgC,YAAY,CAC/BC,SAAU,uBACVC,MAAO,MACPC,QAAS,OACTC,OAAQ,eAOhBpC,GAAAA,CAAE,2CAA2CY,GAAG,SAAS,SAAUC,GAC/DA,EAAEC,iBACF,IACIC,EAAOf,GAAAA,CAAEP,MAAMuB,QAAQ,QACvBC,EAAOjB,GAAAA,CAAEe,GAAMG,YACfC,EAAWnB,GAAAA,CAAEe,GAAMnB,KAAK,UAwC5B,OAvCAI,IAAAA,KAAO,CACHoB,KAAM,OACNC,IAAKF,EACLF,KAAMA,EACNK,QAAStB,GAAAA,CARCP,MAQUuB,QAAQ,YAC5BO,QAAS,SAAUN,GAWf,IATA,IAAIoB,EAAUrC,GAAAA,CAAEP,MACZ6C,EAAOD,EAAQzC,KAAK,SAEpB2C,EAAYC,SACZF,EAAKA,EAAKG,QAAQ,kBAAoB,iBAAiBC,QACvD,IAGAC,EAAW,kBAAoBJ,EAC1BK,EAAI,EAAGA,EAAIL,EAAWK,IAC3BD,GAAY,oBAAsBC,EAEtCP,EAAQQ,UAAUF,GAAUG,MAAK,WAC7B9C,GAAAA,CAAEP,MAAMsD,QAAQ,QAAQ,WACpB/C,GAAAA,CAAEP,MAAMS,eAIHmC,EAAQW,KACjB,2BAA6BT,EAAY,GAAK,MAE3CzC,KAAK,uBAAuBM,IAAI,UAAW,UAElDJ,GAAAA,CAAEP,MAAMsD,QAAQ,QAAQ,WACpB/C,GAAAA,CAAEP,MAAMS,aAGhB6B,MAAO,SAAUkB,EAAKlB,GAElB,OAAO,MAGR,S,kBAIf,WACI,IAAImB,EAAOzD,KACXyD,EAAKrB,4BAOL,IAAIsB,EAAmBnD,GAAAA,CAAE,eACrBoD,EAAoBD,EAAiBrD,KACrC,0CAEJ,GAAiC,IAA7BsD,EAAkBV,QAA4C,KAA5BU,EAAkB7C,MAAc,CAClE,IAAI8C,EAAmB,IAAMD,EAAkB7C,MAC3C+C,EAAuBtD,GAAAA,CAAE,eAAeF,KAAKuD,GACjDH,EAAKK,gBAAgBD,GACrBJ,EAAKM,UAAUL,GAOnBnD,GAAAA,CAAE,4BAA4ByD,KAAK,SAAS,SAAU5C,GAElD,IAAInB,EAAcM,GAAAA,CAAEP,MAAMuB,UAAUoB,OAAO,YAC3Cc,EAAKK,gBAAgB7D,GACrBwD,EAAKM,UAAU9D,MAOnBM,GAAAA,CAAE,oCAAoCyD,KAAK,SAAS,SAAU5C,GAC1DA,EAAEC,iBACF,IAAI4C,EAA0B1D,GAAAA,CAAEP,MAC3BuB,UACAoB,OAAO,YACPtC,KAAK,4BAGVoD,EAAKS,sBAAwB3D,GAAAA,CAAEP,MAAMuB,UAAUoB,OAAO,UACtDc,EAAKS,sBAAsBC,QAAQ,QAAQ,WACvC5D,GAAAA,CAAEP,MAAMS,YAIZwD,EAAwBtD,IAAI,UAAW,aAO3CJ,GAAAA,CAAE,UAAUF,KAAK,oCAAoCM,IAAI,UAAW,QACpEJ,GAAAA,CAAE,UAAUF,KAAK,qCAAqCM,IAAI,UAAW,QAOrEJ,GAAAA,CAAE,4BAA4BW,YAAY,W,mFAzP7BpB","sources":["webpack://plone.staticresources/./node_modules/mockup/src/pat/controlpanels/discussion-comments--implementation.js"],"sourcesContent":["import $ from \"jquery\";\nimport Modal from \"../modal/modal\";\n\nexport default class Contentrules {\n    constructor(el) {\n        this.el = el;\n    }\n    /**************************************************************************\n     * Create a reply-to-comment form right beneath the form that is passed to\n     * the function. We do this by copying the regular comment form and\n     * adding a hidden in_reply_to field to the form.\n     **************************************************************************/\n    createReplyForm(comment_div) {\n        var comment_id = comment_div.attr(\"id\");\n\n        var reply_button = comment_div.find(\".reply-to-comment-button\");\n\n        /* Clone the reply div at the end of the page template that contains\n         * the regular comment form.\n         */\n        var reply_div = $(\"#commenting\").clone(true);\n\n        /* Remove the ReCaptcha JS code before appending the form. If not\n         * removed, this causes problems\n         */\n        reply_div.find(\"#formfield-form-widgets-captcha\").find(\"script\").remove();\n\n        /* Insert the cloned comment form right after the reply button of the\n         * current comment.\n         */\n        reply_div.appendTo(comment_div).css(\"display\", \"none\");\n\n        /* Remove id='commenting' attribute, since we use it to uniquely define\n            the main reply form. */\n        // Still belongs to class='reply'\n        reply_div.removeAttr(\"id\");\n\n        /* Hide the reply button (only hide, because we may want to show it\n         * again if the user hits the cancel button).\n         */\n        $(reply_button).css(\"display\", \"none\");\n\n        /* Fetch the reply form inside the reply div */\n        var reply_form = reply_div.find(\"form\");\n\n        /* Change the id of the textarea of the reply form\n         * To avoid conflict later between textareas with same id 'form-widgets-comment-text' while implementing a seperate instance of TinyMCE\n         * */\n        reply_form\n            .find(\"#formfield-form-widgets-comment-text\")\n            .attr(\"id\", \"formfield-form-widgets-new-textarea\" + comment_id);\n        reply_form\n            .find(\"#form-widgets-comment-text\")\n            .attr(\"id\", \"form-widgets-new-textarea\" + comment_id);\n\n        /* Populate the hidden 'in_reply_to' field with the correct comment\n            id */\n        reply_form.find('input[name=\"form.widgets.in_reply_to\"]').val(comment_id);\n\n        /* Add a remove-reply-to-comment Javascript function to remove the\n            form */\n        var cancel_reply_button = reply_div.find(\".cancelreplytocomment\");\n        cancel_reply_button.attr(\"id\", comment_id);\n\n        /* Show the cancel buttons. */\n        reply_form.find('input[name=\"form.buttons.cancel\"]').css(\"display\", \"inline\");\n\n        /* Show the reply layer with a slide down effect */\n        reply_div.slideDown(\"slow\");\n\n        /* Show the cancel button in the reply-to-comment form */\n        cancel_reply_button.css(\"display\", \"inline\");\n    }\n\n    /**************************************************************************\n     * Remove all error messages and field values from the form that is passed\n     * to the function.\n     **************************************************************************/\n    clearForm(form_div) {\n        form_div.find(\".error\").removeClass(\"error\");\n        form_div.find(\".fieldErrorBox\").remove();\n        form_div.find('input[type=\"text\"]').attr(\"value\", \"\");\n        form_div.find(\"textarea\").attr(\"value\", \"\");\n        /* XXX: Clean all additional form extender fields. */\n    }\n\n    init_comment_eventhandler() {\n        /**********************************************************************\n         * Transmit a single comment.\n         **********************************************************************/\n        $('input[name=\"form.button.TransmitComment\"]').on(\"click\", function (e) {\n            e.preventDefault();\n            var trigger = this;\n            var form = $(this).parents(\"form\");\n            var data = $(form).serialize();\n            var form_url = $(form).attr(\"action\");\n            var comment_id = $(this).parents(\".comment\").attr(\"id\");\n            $.ajax({\n                type: \"GET\",\n                url: form_url,\n                data: data,\n                context: trigger,\n                success: function (msg) {\n                    let url = location.href;\n                    $(this)\n                        .parents(\".comment\")\n                        .load(\n                            // loading child nodes is not enough,\n                            // class attributes are needed for visualization of workflow_state\n                            url + \" #\" + comment_id + \".comment\",\n                            function () {\n                                $(this).find(\".comment\").unwrap();\n                                init_comment_eventhandler();\n                                $(\".pat-plone-modal\").patPloneModal();\n                            }\n                        );\n                },\n                error: function (msg) {\n                    return true;\n                },\n            });\n            return false;\n        });\n\n        /**********************************************************************\n         * Edit a comment\n         **********************************************************************/\n        if ($.fn.prepOverlay) {\n            $('form[name=\"edit\"]').prepOverlay({\n                cssclass: \"overlay-edit-comment\",\n                width: \"60%\",\n                subtype: \"ajax\",\n                filter: \"#content>*\",\n            });\n        }\n\n        /**********************************************************************\n         * Delete a comment and its answers.\n         **********************************************************************/\n        $('input[name=\"form.button.DeleteComment\"]').on(\"click\", function (e) {\n            e.preventDefault();\n            var trigger = this;\n            var form = $(this).parents(\"form\");\n            var data = $(form).serialize();\n            var form_url = $(form).attr(\"action\");\n            $.ajax({\n                type: \"POST\",\n                url: form_url,\n                data: data,\n                context: $(trigger).parents(\".comment\"),\n                success: function (data) {\n                    // jshint ignore:line\n                    var comment = $(this);\n                    var clss = comment.attr(\"class\");\n                    // remove replies\n                    var treelevel = parseInt(\n                        clss[clss.indexOf(\"replyTreeLevel\") + \"replyTreeLevel\".length],\n                        10\n                    );\n                    // selector for all the following elements of lower level\n                    var selector = \".replyTreeLevel\" + treelevel;\n                    for (var i = 0; i < treelevel; i++) {\n                        selector += \", .replyTreeLevel\" + i;\n                    }\n                    comment.nextUntil(selector).each(function () {\n                        $(this).fadeOut(\"fast\", function () {\n                            $(this).remove();\n                        });\n                    });\n                    // Add delete button to the parent\n                    var parent = comment.prev(\n                        '[class*=\"replyTreeLevel' + (treelevel - 1) + '\"]'\n                    );\n                    parent.find('form[name=\"delete\"]').css(\"display\", \"inline\");\n                    // remove comment\n                    $(this).fadeOut(\"fast\", function () {\n                        $(this).remove();\n                    });\n                },\n                error: function (req, error) {\n                    // jshint ignore:line\n                    return true;\n                },\n            });\n            return false;\n        });\n    }\n\n    init() {\n        let self = this;\n        self.init_comment_eventhandler();\n\n        /**********************************************************************\n         * If the user has hit the reply button of a reply-to-comment form\n         * (form was submitted with a value for the 'in_reply_to' field in the\n         * request), create a reply-to-comment form right under this comment.\n         **********************************************************************/\n        var post_comment_div = $(\"#commenting\");\n        var in_reply_to_field = post_comment_div.find(\n            'input[name=\"form.widgets.in_reply_to\"]'\n        );\n        if (in_reply_to_field.length !== 0 && in_reply_to_field.val() !== \"\") {\n            var current_reply_id = \"#\" + in_reply_to_field.val();\n            var current_reply_to_div = $(\".discussion\").find(current_reply_id);\n            self.createReplyForm(current_reply_to_div);\n            self.clearForm(post_comment_div);\n        }\n\n        /**********************************************************************\n         * If the user hits the 'reply' button of an existing comment, create a\n         * reply form right beneath this comment.\n         **********************************************************************/\n        $(\".reply-to-comment-button\").bind(\"click\", function (e) {\n            // jshint ignore:line\n            var comment_div = $(this).parents().filter(\".comment\");\n            self.createReplyForm(comment_div);\n            self.clearForm(comment_div);\n        });\n\n        /**********************************************************************\n         * If the user hits the 'clear' button of an open reply-to-comment form,\n         * remove the form and show the 'reply' button again.\n         **********************************************************************/\n        $(\"#commenting #form-buttons-cancel\").bind(\"click\", function (e) {\n            e.preventDefault();\n            var reply_to_comment_button = $(this)\n                .parents()\n                .filter(\".comment\")\n                .find(\".reply-to-comment-button\");\n\n            /* Find the reply-to-comment form and hide and remove it again. */\n            self.reply_to_comment_form = $(this).parents().filter(\".reply\");\n            self.reply_to_comment_form.slideUp(\"slow\", function () {\n                $(this).remove();\n            });\n\n            /* Show the reply-to-comment button again. */\n            reply_to_comment_button.css(\"display\", \"inline\");\n        });\n\n        /**********************************************************************\n         * By default, hide the reply and the cancel button for the regular add\n         * comment form.\n         **********************************************************************/\n        $(\".reply\").find('input[name=\"form.buttons.reply\"]').css(\"display\", \"none\");\n        $(\".reply\").find('input[name=\"form.buttons.cancel\"]').css(\"display\", \"none\");\n\n        /**********************************************************************\n         * By default, show the reply button only when Javascript is enabled.\n         * Otherwise hide it, since the reply functions only work with JS\n         * enabled.\n         **********************************************************************/\n        $(\".reply-to-comment-button\").removeClass(\"hide\");\n    }\n}\n"],"names":["Contentrules","el","this","comment_div","comment_id","attr","reply_button","find","reply_div","$","clone","remove","appendTo","css","removeAttr","reply_form","val","cancel_reply_button","slideDown","form_div","removeClass","on","e","preventDefault","form","parents","data","serialize","form_url","type","url","context","success","msg","location","href","load","unwrap","init_comment_eventhandler","patPloneModal","error","prepOverlay","cssclass","width","subtype","filter","comment","clss","treelevel","parseInt","indexOf","length","selector","i","nextUntil","each","fadeOut","prev","req","self","post_comment_div","in_reply_to_field","current_reply_id","current_reply_to_div","createReplyForm","clearForm","bind","reply_to_comment_button","reply_to_comment_form","slideUp"],"sourceRoot":""}