"use strict";(self.webpackChunkplone_staticresources=self.webpackChunkplone_staticresources||[]).push([[77831],{77831:function(e,t,n){n.r(t);n(35666);var r=n(65311),a=n.n(r),s=n(89867),i=n(19513),c=n(39191),l=n(28016),o=s.Z.getLogger("pat.markdown"),u=/\.md$/,d=c.Z.extend({name:"markdown",trigger:".pat-markdown",async init(){if(this.$el.is(this.trigger)){var e=this.$el.is(":input")?this.$el.val():this.$el.text();(await this.render(e)).replaceAll(this.$el)}},async render(e){const t=(await n.e(51946).then(n.t.bind(n,51946,23))).default;t.extensions.prettify=function(){return[{type:"output",filter:function(e){return e.replace(/(<pre>)?<code>/gi,(function(e,t){return t?'<pre class="pat-syntax-highlight" tabIndex="0"><code data-inner="1">':'<code class="pat-syntax-highlight">'}))}}]};const r=a()("<div/>"),s=new t.Converter({tables:!0,extensions:["prettify"]});return r.html(s.makeHtml(e)),r},async renderForInjection(e,t){var n,r=t;if(e.source&&null!==(n=/^#+\s*(.*)/.exec(e.source))){if(null===(r=this.extractSection(r,n[1])))return o.warn('Could not find section "'+e.source+'" in '+e.url),a()("<div/>").attr("data-src",e.url);r+="\n"}return(await this.render(r)).attr("data-src",e.source?e.url+e.source:e.url)},extractSection(e,t){var n,r;t=i.Z.escapeRegExp(t);var a=new RegExp("^((#+)\\s*@TEXT@\\s*|@TEXT@\\s*\\n([=-])+\\s*)$".replace(/@TEXT@/g,t),"m"),s=a.exec(e);if(null===s)return null;if(s[2])r=s[2].length,n=(n="^#{@LEVEL@}\\s*@TEXT@\\s*$\\n+((?:.|\\n)*?(?=^#{1,@LEVEL@}\\s)|.*(?:.|\\n)*)").replace(/@LEVEL@/g,r);else{if(!s[3])return o.error("Unexpected section match result",s),null;n="="===s[3]?"^@TEXT@\\s*\\n=+\\s*\\n+((?:.|\\n)*?(?=^.*?\\n=+\\s*$)|(?:.|\\n)*)":"^@TEXT@\\s*\\n-+\\s*\\n+((?:.|\\n)*?(?=^.*?\\n[-=]+\\s*$)|(?:.|\\n)*)"}return n=n.replace(/@TEXT@/g,t),null===(s=(a=new RegExp(n,"m")).exec(e))&&o.error("Failed to find section with known present header?"),null!==s?s[0]:null}});a()(document).ready((function(){a()(document.body).on("patterns-inject-triggered.pat-markdown","a.pat-inject",(function(){a()(this).data("pat-inject").forEach((function(e){u.test(e.url)&&(e.dataType="markdown")}))}))})),l.Z.registerTypeHandler("markdown",{sources:async(e,t)=>await Promise.all(e.map((async function(e){var n=d.init(e.$target);return await n.renderForInjection(e,t)})))}),t.default=d}}]);
//# sourceMappingURL=77831.72b9bb9e6993bfb71b11.min.js.map