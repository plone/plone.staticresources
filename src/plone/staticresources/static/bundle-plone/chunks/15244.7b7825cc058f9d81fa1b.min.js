/*! @plone/mockup 5.0.0-alpha.24 */
"use strict";(self.webpackChunkplone_staticresources=self.webpackChunkplone_staticresources||[]).push([[15244],{15244:function(e,n,t){t.r(n);var r=t(22236),a=t.n(r),s=t(7424),i=t(37834),c=t(11191),l=t(18742),o=t(72459);const u=s.Z.getLogger("pat.markdown"),d=/\.md$/,p=c.Z.extend({name:"markdown",trigger:".pat-markdown",async init(){if(this.$el.is(this.trigger)){const e=this.$el.is(":input")?this.$el.val():this.$el[0].innerHTML;let n=await this.render(e);this.el.innerHTML="",this.el.append(...n[0].childNodes)}},async render(e){const n=(await t.e(23515).then(t.t.bind(t,23515,23))).marked,r=(await t.e(79094).then(t.t.bind(t,79094,23))).default,s=(await t.e(18378).then(t.bind(t,18378))).default,i=document.createElement("div"),c=r.sanitize(n.parse(e));i.innerHTML=c;for(const e of i.querySelectorAll("pre > code")){const n=e.parentElement;n.classList.add("pat-syntax-highlight"),new s(n),await l.Z.await_event(n,"init.syntax-highlight.patterns")}return a()(i)},async renderForInjection(e,n){let t,r=n;if(e.source&&null!==(t=/^#+\s*(.*)/.exec(e.source))){if(r=this.extractSection(r,t[1]),null===r)return u.warn('Could not find section "'+e.source+'" in '+e.url),a()("<div/>").attr("data-src",e.url);r+="\n"}return(await this.render(r)).attr("data-src",e.source?e.url+e.source:e.url)},extractSection(e,n){let t;n=i.Z.escapeRegExp(n);let r=new RegExp("^((#+)\\s*@TEXT@\\s*|@TEXT@\\s*\\n([=-])+\\s*)$".replace(/@TEXT@/g,n),"m"),a=r.exec(e);if(null===a)return null;if(a[2]){const e=a[2].length;t="^#{@LEVEL@}\\s*@TEXT@\\s*$\\n+((?:.|\\n)*?(?=^#{1,@LEVEL@}\\s)|.*(?:.|\\n)*)",t=t.replace(/@LEVEL@/g,e)}else{if(!a[3])return u.error("Unexpected section match result",a),null;t="="===a[3]?"^@TEXT@\\s*\\n=+\\s*\\n+((?:.|\\n)*?(?=^.*?\\n=+\\s*$)|(?:.|\\n)*)":"^@TEXT@\\s*\\n-+\\s*\\n+((?:.|\\n)*?(?=^.*?\\n[-=]+\\s*$)|(?:.|\\n)*)"}return t=t.replace(/@TEXT@/g,n),r=new RegExp(t,"m"),a=r.exec(e),null===a&&u.error("Failed to find section with known present header?"),null!==a?a[0]:null}});a()(document).ready((function(){a()(document.body).on("patterns-inject-triggered.pat-markdown","a.pat-inject",(function(){a()(this).data("pat-inject").forEach((function(e){d.test(e.url)&&(e.dataType="markdown")}))}))})),o.Z.registerTypeHandler("markdown",{async sources(e,n){return await Promise.all(e.map((async function(e){const t=new p(e.$target[0]);return await t.renderForInjection(e,n)})))}}),n.default=p}}]);
//# sourceMappingURL=15244.7b7825cc058f9d81fa1b.min.js.map